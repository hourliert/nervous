/// <reference path="./all.d.ts" />
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var Neuron = (function () {
    function Neuron(layer, position) {
        this.layer = layer;
        this.id = "n_" + this.layer.id + "_" + position;
        this.A = 0;
        this.Z = 0;
        this.inputSynapses = [];
        this.outputSynapses = [];
    }
    Object.defineProperty(Neuron.prototype, "A", {
        get: function () {
            return this.activatedValue;
        },
        set: function (activatedValue) {
            this.activatedValue = activatedValue;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Neuron.prototype, "Z", {
        get: function () {
            return this.preActivatedValue;
        },
        set: function (preActivatedValue) {
            this.preActivatedValue = preActivatedValue;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Neuron.prototype, "delta", {
        get: function () {
            return this.error;
        },
        set: function (error) {
            this.error = error;
        },
        enumerable: true,
        configurable: true
    });
    Neuron.prototype.addInputSynapse = function (s) {
        this.inputSynapses.push(s);
    };
    Neuron.prototype.addOutputSynapse = function (s) {
        this.outputSynapses.push(s);
    };
    Neuron.prototype.activate = function (activationFunctions) {
        var sum = 0;
        for (var i = 0; i < this.inputSynapses.length; i++) {
            var s = this.inputSynapses[i];
            sum += s.weight * s.neurons.input.A;
        }
        this.Z = sum;
        this.A = activationFunctions.activation(sum);
    };
    Neuron.prototype.computeError = function (costStrategy) {
        var delta = 0;
        for (var i = 0; i < this.outputSynapses.length; i++) {
            var s = this.outputSynapses[i];
            delta = delta + s.neurons.output.delta * s.weight;
        }
        this.error = costStrategy.delta(delta || this.A, this.Z);
    };
    Neuron.prototype.backPropagate = function () {
        for (var i = 0; i < this.outputSynapses.length; i++) {
            var s = this.outputSynapses[i];
            s.gradient = s.gradient + this.A * s.neurons.output.delta;
        }
    };
    return Neuron;
})();
exports.Neuron = Neuron;
var BiasNeuron = (function (_super) {
    __extends(BiasNeuron, _super);
    function BiasNeuron(layer, position) {
        _super.call(this, layer, position);
        this.A = 1;
    }
    Object.defineProperty(BiasNeuron.prototype, "A", {
        get: function () {
            return 1;
        },
        set: function (value) {
            this.activatedValue = 1;
        },
        enumerable: true,
        configurable: true
    });
    return BiasNeuron;
})(Neuron);
exports.BiasNeuron = BiasNeuron;
var HiddenNeuron = (function (_super) {
    __extends(HiddenNeuron, _super);
    function HiddenNeuron(layer, position) {
        _super.call(this, layer, position);
    }
    return HiddenNeuron;
})(Neuron);
exports.HiddenNeuron = HiddenNeuron;
var InputNeuron = (function (_super) {
    __extends(InputNeuron, _super);
    function InputNeuron(layer, position) {
        _super.call(this, layer, position);
    }
    return InputNeuron;
})(Neuron);
exports.InputNeuron = InputNeuron;
var OutputNeuron = (function (_super) {
    __extends(OutputNeuron, _super);
    function OutputNeuron(layer, position) {
        _super.call(this, layer, position);
    }
    return OutputNeuron;
})(Neuron);
exports.OutputNeuron = OutputNeuron;

//# sourceMappingURL=data:application/json;base64,