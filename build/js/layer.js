/// <reference path="./all.d.ts" />
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var neuron_1 = require('./neuron');
var synapse_1 = require('./synapse');
var Layer = (function () {
    function Layer(size) {
        this.id = "l_" + Layer.currentId++;
        this.neurons = [];
    }
    Object.defineProperty(Layer.prototype, "neuronsValue", {
        get: function () {
            var ret = [];
            this.forEachNeuron(function (n) { return ret.push(n.A); });
            return ret;
        },
        set: function (values) {
            var hasBiasNeuron = (this.neurons[this.neurons.length - 1] instanceof neuron_1.BiasNeuron) ? 1 : 0;
            if (values.length !== (this.neurons.length - hasBiasNeuron)) {
                throw new Error("The size of the input " + values.length + " differs fron the number of neurons " + (this.neurons.length - hasBiasNeuron));
            }
            this.forEachNeuron(function (n, index) { return n.A = values[index]; });
        },
        enumerable: true,
        configurable: true
    });
    Layer.prototype.linkTo = function (layer) {
        var synapses = [];
        for (var i = 0; i < this.neurons.length; i++) {
            var n1 = this.neurons[i];
            for (var j = 0; j < layer.neurons.length; j++) {
                var n2 = layer.neurons[j], s = new synapse_1.Synapse(n1, n2, Math.random() / Math.sqrt(this.neurons.length));
                n1.addOutputSynapse(s);
                n2.addInputSynapse(s);
                synapses.push(s);
            }
        }
        return synapses;
    };
    Layer.prototype.forEachNeuron = function (func) {
        for (var i = 0; i < this.neurons.length; i++) {
            func(this.neurons[i], i);
        }
    };
    Layer.prototype.activate = function (activationFunctions) {
        this.forEachNeuron(function (n) { return n.activate(activationFunctions); });
    };
    Layer.prototype.computeErrors = function (costStrategy) {
        this.forEachNeuron(function (n) { return n.computeError(costStrategy); });
    };
    Layer.prototype.computeDeltas = function () {
        this.forEachNeuron(function (n) { return n.backPropagate(); });
    };
    Layer.currentId = 0;
    return Layer;
})();
exports.Layer = Layer;
var InputLayer = (function (_super) {
    __extends(InputLayer, _super);
    function InputLayer(size) {
        _super.call(this, size);
        for (var i = 0; i < size; i++) {
            this.neurons.push(new neuron_1.InputNeuron(this, i));
        }
        this.neurons.push(new neuron_1.BiasNeuron(this, size));
    }
    InputLayer.prototype.activate = function () {
        throw new Error("The input layer could not propagate using a previous layer");
    };
    return InputLayer;
})(Layer);
exports.InputLayer = InputLayer;
var HiddenLayer = (function (_super) {
    __extends(HiddenLayer, _super);
    function HiddenLayer(size) {
        _super.call(this, size);
        for (var i = 0; i < size; i++) {
            this.neurons.push(new neuron_1.HiddenNeuron(this, i));
        }
        this.neurons.push(new neuron_1.BiasNeuron(this, size));
    }
    return HiddenLayer;
})(Layer);
exports.HiddenLayer = HiddenLayer;
var OutputLayer = (function (_super) {
    __extends(OutputLayer, _super);
    function OutputLayer(size) {
        _super.call(this, size);
        for (var i = 0; i < size; i++) {
            this.neurons.push(new neuron_1.OutputNeuron(this, i));
        }
    }
    return OutputLayer;
})(Layer);
exports.OutputLayer = OutputLayer;

//# sourceMappingURL=data:application/json;base64,