/// <reference path="./all.d.ts" />
var nervous_array_1 = require('nervous-array');
var nervous_sigmoid_1 = require('nervous-sigmoid');
var layer_1 = require('./layer');
var cost_1 = require('./cost');
require('./polyfills/assign');
var NeuralNetwork = (function () {
    function NeuralNetwork(config) {
        this.config = config;
        this.config.hiddenLayers = this.config.hiddenLayers || [this.config.inputLayerSize];
        this.config.trainingOptions = this.config.trainingOptions || {};
        this.config.trainingOptions.iterations = this.config.trainingOptions.iterations || 10000;
        this.config.trainingOptions.batchSize = this.config.trainingOptions.batchSize || 10;
        this.config.trainingOptions.regularization = (this.config.trainingOptions.regularization === undefined) ? 0.0001 : this.config.trainingOptions.regularization;
        this.config.trainingOptions.learningRate = (this.config.trainingOptions.learningRate === undefined) ? 0.5 : this.config.trainingOptions.learningRate;
        this.activationFunctions = {
            activation: nervous_sigmoid_1.sigmoid,
            activationPrime: nervous_sigmoid_1.sigmoidPrime
        };
        switch (this.config.costStrategy) {
            case cost_1.ECostStrategy.Quadratic:
            default:
                this.costStrategy = new cost_1.QuadraticCost(this.activationFunctions);
                break;
            case cost_1.ECostStrategy.CrossEntropy:
                this.costStrategy = new cost_1.CrossEntropyCost(this.activationFunctions);
                break;
        }
        this.neuronsLayers = [];
        this.synapsesLayers = [];
        this.numberOfSynapses = 0;
        //layers creation
        this.neuronsLayers.push(this.inputLayer = new layer_1.InputLayer(config.inputLayerSize));
        for (var i = 0; i < config.hiddenLayers.length; i++) {
            this.neuronsLayers.push(new layer_1.HiddenLayer(config.hiddenLayers[i]));
        }
        this.neuronsLayers.push(this.outputLayer = new layer_1.OutputLayer(config.outputLayerSize));
        //synapses creation
        for (var j = 0; j < this.neuronsLayers.length - 1; j++) {
            var synapses = this.neuronsLayers[j].linkTo(this.neuronsLayers[j + 1]);
            this.synapsesLayers.push(synapses);
            this.numberOfSynapses += synapses.length;
        }
    }
    Object.defineProperty(NeuralNetwork.prototype, "weights", {
        get: function () {
            var weights = [];
            this.forEachSynapse(function (s) {
                weights.push(s.weight);
            });
            return weights;
        },
        set: function (synapses) {
            if (synapses.length !== this.numberOfSynapses) {
                throw new Error("The number of synapses differs.");
            }
            var cpt = 0;
            this.forEachSynapse(function (s) {
                s.weight = synapses[cpt++];
            });
        },
        enumerable: true,
        configurable: true
    });
    NeuralNetwork.prototype.getGradients = function (data) {
        var gradients = [];
        this.backward(data);
        this.forEachSynapse(function (s) {
            gradients.push(s.gradient);
        });
        return gradients;
    };
    NeuralNetwork.prototype.forEachSynapse = function (func) {
        for (var i = 0; i < this.synapsesLayers.length; i++) {
            for (var j = 0; j < this.synapsesLayers[i].length; j++) {
                func(this.synapsesLayers[i][j], i, j);
            }
        }
    };
    NeuralNetwork.prototype.forward = function (data) {
        var ret = [];
        for (var k = 0; k < data.length; k++) {
            //set input to input layer neurons
            this.inputLayer.neuronsValue = data[k].input;
            //propagate on each hidden layer and output
            for (var i = 1; i < this.neuronsLayers.length; i++) {
                this.neuronsLayers[i].activate(this.activationFunctions);
            }
            //retrieve output neuron value
            ret.push(this.outputLayer.neuronsValue);
        }
        return ret;
    };
    NeuralNetwork.prototype.cost = function (data) {
        var yHats = this.forward(data), j = 0, weightsSum = 0;
        for (var k = 0; k < data.length; k++) {
            j += this.costStrategy.fn(data[k].output, yHats[k]);
        }
        j = j / data.length;
        this.forEachSynapse(function (s) {
            weightsSum += Math.pow(s.weight, 2);
        });
        j += this.config.trainingOptions.regularization / (2 * data.length) * weightsSum;
        return j;
    };
    NeuralNetwork.prototype.backward = function (data) {
        var ret = [];
        for (var k = 0; k < data.length; k++) {
            var tuple = data[k], yHat = this.forward([tuple])[0];
            //set the input and output layer value
            this.inputLayer.neuronsValue = tuple.input;
            this.outputLayer.neuronsValue = nervous_array_1.sub(yHat, tuple.output);
            //compute propagation errors for all layers expect input
            for (var i = this.neuronsLayers.length - 1; i >= 1; i--) {
                this.neuronsLayers[i].computeErrors(this.costStrategy);
            }
            //compute dJdW for all synapses layer
            for (var i = 0; i < this.neuronsLayers.length; i++) {
                this.neuronsLayers[i].computeGradients();
            }
        }
        return this.synapsesLayers;
    };
    NeuralNetwork.prototype.adjustWeigths = function (synapses, batchSize, dataSize) {
        var _this = this;
        if (synapses.length !== this.synapsesLayers.length) {
            throw new Error("The number of synapses layers differs.");
        }
        for (var i = 0; i < synapses.length; i++) {
            if (synapses[i].length !== this.synapsesLayers[i].length) {
                throw new Error("The number of synapses in the " + i + " layer differs");
            }
        }
        this.forEachSynapse(function (s) {
            s.weight = (1 - _this.config.trainingOptions.learningRate * _this.config.trainingOptions.regularization / dataSize) * s.weight - _this.config.trainingOptions.learningRate / batchSize * s.gradient;
            s.gradient = 0;
        });
    };
    NeuralNetwork.prototype.train = function (data, options) {
        Object.assign(this.config.trainingOptions, options);
        var iterations = this.config.trainingOptions.iterations, batchSize = this.config.trainingOptions.batchSize = (this.config.trainingOptions.batchSize > data.length) ? data.length : this.config.trainingOptions.batchSize;
        for (var i = 0; i < iterations; i++) {
            if (batchSize && batchSize !== data.length) {
                nervous_array_1.shuffle(data);
            }
            var batch = data.slice(0, batchSize), synapses = this.backward(batch);
            this.adjustWeigths(synapses, batchSize, data.length);
            if (this.config.trainingOptions.log && (i % (iterations / 100) === 0)) {
                console.info("Progress " + i / iterations + ", cost: " + this.cost(data));
            }
        }
        return {
            error: this.cost(data)
        };
    };
    return NeuralNetwork;
})();
exports.NeuralNetwork = NeuralNetwork;
function computeNumericalGradients(n, data) {
    var epsilon = 1e-4, initialWeights = n.weights, numGrads = initialWeights.length, gradients = nervous_array_1.zeros(numGrads), perturb = nervous_array_1.zeros(numGrads), k;
    for (k = 0; k < numGrads; k++) {
        var loss1 = void 0, loss2 = void 0;
        perturb[k] = epsilon;
        n.weights = nervous_array_1.add(initialWeights, perturb);
        loss2 = n.cost(data);
        n.weights = nervous_array_1.sub(initialWeights, perturb);
        loss1 = n.cost(data);
        gradients[k] = nervous_array_1.sum(nervous_array_1.multiplyByScalar(nervous_array_1.sub(loss2, loss1), 1 / (epsilon * 2)));
        perturb[k] = 0;
    }
    n.weights = initialWeights;
    return gradients;
}
exports.computeNumericalGradients = computeNumericalGradients;
// let n = new NeuralNetwork({
//   inputLayerSize: 2,
//   hiddenLayers: [3],
//   outputLayerSize: 1,
//   trainingOptions: {
//     regularization: 0.0001,
//     iterations: 1000000,
//     learningRate: 1,
//     log: true
//   }
// });
// console.log('----- Neural Network -----');
// console.log(n);
// let data: ITrainingData = [
//   {
//     input: [3.0 / 10.0, 5.0 / 10.0],
//     output: [75.0 / 100.0]
//   },
//   {
//     input: [5.0 / 10.0, 1.0 / 10.0],
//     output: [82.0 / 100.0]
//   },
//   {
//     input: [10.0 / 10.0, 2.0 / 10.0],
//     output: [93.0 / 100.0]
//   },
//   {
//     input: [6.0 / 10.0, 3.0 / 10.0],
//     output: [81.0 / 100.0]
//   }
// ];
// let gradients = n.getGradients(data),
//     numGradients = computeNumericalGradients(n, data);
// //biases neurons regulation
// numGradients.forEach((x, i) => {
//   if (x === 0) {
//     numGradients[i] = gradients[i];
//   }
// });
// let normResult = rootMeanSquare(sub(gradients, numGradients)) / rootMeanSquare(add(gradients, numGradients));
// console.log('----- Gradient comparaison -----');
// console.info(normResult);
// console.info('----- PRE TRAINING -----');
// console.log(n.forward(data));
// console.log(n.cost(data));
// let time = +new Date();
// n.train(data);
// console.log(+new Date() - time, 'ms');
// console.info('----- POST TRAINING -----');
// console.log(n.forward(data));
// console.log(n.cost(data));

//# sourceMappingURL=data:application/json;base64,